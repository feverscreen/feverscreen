{"version":3,"file":"js/641.775b6dd3.js","mappings":"mbAGA,MAAMA,EAAO,IAAIC,MAAM,IAAIC,UAAKC,GAEhCH,EAAKI,UAAKD,EAAW,MAAM,GAAM,GAEjC,IAAIE,EAAYL,EAAKM,OAErB,SAASC,EAAcC,GACfH,IAAcL,EAAKM,QAAQN,EAAKI,KAAKJ,EAAKM,OAAS,GACvD,MAAMG,EAAMJ,EAIZ,OAHAA,EAAYL,EAAKS,GAEjBT,EAAKS,GAAOD,EACLC,EAGX,SAASC,EAAUD,GAAO,OAAOT,EAAKS,GAEtC,SAASE,EAAWF,GACZA,EAAM,KACVT,EAAKS,GAAOJ,EACZA,EAAYI,GAGhB,SAASG,EAAWH,GAChB,MAAMI,EAAMH,EAAUD,GAEtB,OADAE,EAAWF,GACJI,EAGX,IAAIC,EAAoB,IAAIC,YAAY,QAAS,CAAEC,WAAW,EAAMC,OAAO,IAE3EH,EAAkBI,SAElB,IAAIC,EAAuB,KAC3B,SAASC,IAIL,OAH6B,OAAzBD,GAAiCA,EAAqBE,SAAWC,EAAAA,OAAAA,SACjEH,EAAuB,IAAII,WAAWD,EAAAA,OAAAA,SAEnCH,EAGX,SAASK,EAAmBC,EAAKC,GAC7B,OAAOZ,EAAkBI,OAAOE,IAAkBO,SAASF,EAAKA,EAAMC,IAG1E,IAAIE,EAAkB,EAEtB,SAASC,EAAkBC,EAAKC,GAC5B,MAAMN,EAAMM,EAAoB,EAAbD,EAAIxB,QAGvB,OAFAc,IAAkBY,IAAIF,EAAKL,EAAM,GACjCG,EAAkBE,EAAIxB,OACfmB,EAMJ,SAASQ,EAAsBC,GAClC,IACI,IAAIC,EAAON,EAAkBK,EAAQZ,EAAAA,mBACjCc,EAAOR,EACPf,EAAMS,EAAAA,sBAA2Ba,EAAMC,GAC3C,OAAOxB,EAAWC,GAJtB,QAMIqB,EAAOF,IAAIZ,IAAkBO,SAASQ,EAAO,EAAGA,EAAO,EAAIC,IAC3Dd,EAAAA,gBAAqBa,EAAa,EAAPC,IAI5B,MAAMC,EAAwB,SAASC,GAC1C,IAAIzB,EAAMyB,EACV,OAAO/B,EAAcM,IAGZ0B,EAA6B,SAASD,GAC/C1B,EAAW0B,IAGFE,EAA6B,WACtC,IAAI3B,EAAM,IAAIZ,MACd,OAAOM,EAAcM,IAGZ4B,EAA8B,SAASH,EAAMI,GACtD,IAAI7B,EAAMH,EAAU4B,GAAMlC,KAAKM,EAAUgC,IACzC,OAAO7B,GAGE8B,EAAmB,SAASL,EAAMI,GAC3C,MAAM,IAAIE,MAAMpB,EAAmBc,EAAMI,M","sources":["webpack://frontend/./curve-fit/curve_fitting_bg.js"],"sourcesContent":["/* eslint-disable */\nimport * as wasm from './curve_fitting_bg.wasm';\n\nconst heap = new Array(32).fill(undefined);\n\nheap.push(undefined, null, true, false);\n\nlet heap_next = heap.length;\n\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length) heap.push(heap.length + 1);\n    const idx = heap_next;\n    heap_next = heap[idx];\n\n    heap[idx] = obj;\n    return idx;\n}\n\nfunction getObject(idx) { return heap[idx]; }\n\nfunction dropObject(idx) {\n    if (idx < 36) return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\n\nfunction takeObject(idx) {\n    const ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\n\nlet cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });\n\ncachedTextDecoder.decode();\n\nlet cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\n\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\n\nlet WASM_VECTOR_LEN = 0;\n\nfunction passArray8ToWasm0(arg, malloc) {\n    const ptr = malloc(arg.length * 1);\n    getUint8Memory0().set(arg, ptr / 1);\n    WASM_VECTOR_LEN = arg.length;\n    return ptr;\n}\n/**\n* @param {Uint8Array} points\n* @returns {Array<any>}\n*/\nexport function fitCurveThroughPoints(points) {\n    try {\n        var ptr0 = passArray8ToWasm0(points, wasm.__wbindgen_malloc);\n        var len0 = WASM_VECTOR_LEN;\n        var ret = wasm.fitCurveThroughPoints(ptr0, len0);\n        return takeObject(ret);\n    } finally {\n        points.set(getUint8Memory0().subarray(ptr0 / 1, ptr0 / 1 + len0));\n        wasm.__wbindgen_free(ptr0, len0 * 1);\n    }\n}\n\nexport const __wbindgen_number_new = function(arg0) {\n    var ret = arg0;\n    return addHeapObject(ret);\n};\n\nexport const __wbindgen_object_drop_ref = function(arg0) {\n    takeObject(arg0);\n};\n\nexport const __wbg_new_6b6f346b4912cdae = function() {\n    var ret = new Array();\n    return addHeapObject(ret);\n};\n\nexport const __wbg_push_f353108e20ec67a0 = function(arg0, arg1) {\n    var ret = getObject(arg0).push(getObject(arg1));\n    return ret;\n};\n\nexport const __wbindgen_throw = function(arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n\n"],"names":["heap","Array","fill","undefined","push","heap_next","length","addHeapObject","obj","idx","getObject","dropObject","takeObject","ret","cachedTextDecoder","TextDecoder","ignoreBOM","fatal","decode","cachegetUint8Memory0","getUint8Memory0","buffer","wasm","Uint8Array","getStringFromWasm0","ptr","len","subarray","WASM_VECTOR_LEN","passArray8ToWasm0","arg","malloc","set","fitCurveThroughPoints","points","ptr0","len0","__wbindgen_number_new","arg0","__wbindgen_object_drop_ref","__wbg_new_6b6f346b4912cdae","__wbg_push_f353108e20ec67a0","arg1","__wbindgen_throw","Error"],"sourceRoot":""}